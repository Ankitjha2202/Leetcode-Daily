class Solution {
public:
    int maxlen = -1;
    void dfs(int node, vector<int> &vis,unordered_map<int,int> &mp, int len, vector<int> adj[]) {
        vis[node] = 1;
        mp[node] = len;
        for(int child: adj[node]) {
            if(!vis[child]) 
               dfs(child,vis,mp,len+1,adj);
            else if(mp.count(child)) 
               maxlen = max(maxlen,len-mp[child]+1);
        }
    }
    int longestCycle(vector<int>& edges) {
        int n = edges.size();
        vector<int> adj[n];
        for(int i=0;i<n;i++) {
            int u = i;
            int v = edges[i];
            if(v==-1) continue;
            adj[u].push_back(v);
        }
        vector<int> vis(n,0);
        for(int i=0;i<n;i++) {
            if(!vis[i]) {
                unordered_map<int,int>mp;
                dfs(i,vis,mp,0,adj);
            }
        }
        return maxlen;
    }
};
